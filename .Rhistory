credit$OCCUPATION_TYPE <- revalue(credit$OCCUPATION_TYPE, c('Cleaning staff'='LABOR','Cooking staff'='LABOR','Drivers'='LABOR','Laborers'='LABOR','Low-skill Laborers'='LABOR','Security staff'='LABOR','Waiters/barmen staff'='LABOR'))
credit$OCCUPATION_TYPE <- revalue(credit$OCCUPATION_TYPE, c('Accountants'='OFFICE','Core staff'='OFFICE','HR staff'='OFFICE','Medicine staff'='OFFICE','Private service staff'='OFFICE','Realty agents'='OFFICE','Sales staff'='OFFICE','Secretaries'='OFFICE'))
credit$OCCUPATION_TYPE <- revalue(credit$OCCUPATION_TYPE, c('Managers'='TECH','High skill tech staff'='TECH','IT staff'='TECH'))
# View(credit)
#one hot-encoding
credit_temp <- subset(credit, select = -STATUS)
credit_hot <- one_hot(as.data.table(credit_temp),cols = "auto",sparsifyNAs = TRUE,naCols = TRUE,dropCols = TRUE,dropUnusedLevels = TRUE)
credit_hot$STATUS = credit$STATUS
names(credit_hot) <- make.names(names(credit_hot))
# Chunk 6
#6 Split your data into test, tune, and train. (70/15/15)
part_index_1 <- caret::createDataPartition(credit_hot$STATUS,
times=1,
p = 0.70,
groups=1,
list=FALSE)
train <- credit_hot[part_index_1, ]
tune_and_test <- credit_hot[-part_index_1, ]
#The we need to use the function again to create the tuning set
tune_and_test_index <- createDataPartition(tune_and_test$STATUS,
p = .5,
list = FALSE,
times = 1)
tune <- tune_and_test[tune_and_test_index, ]#aka, validation set
test <- tune_and_test[-tune_and_test_index, ]#final testing set
# Chunk 7
(prevalence <- table(credit$STATUS)[[2]]/length(credit$STATUS))
table(credit$STATUS)
# Chunk 8
mytry_tune <- function(x){
xx <- dim(x)[2]-1
sqrt(xx)
}
mytry_tune(credit_hot)
set.seed(1)
credit_RF = randomForest(STATUS ~ .,          #<- Formula: response variable ~ predictors.
#   The period means 'use all other variables in the data'.
train,     #<- A data frame with the variables to be used.
#y = NULL,           #<- A response vector. This is unnecessary because we're specifying a response formula.
#subset = NULL,      #<- This is unnecessary because we're using all the rows in the training data set.
#xtest = NULL,       #<- This is already defined in the formula by the ".".
#ytest = NULL,       #<- This is already defined in the formula by "PREGNANT".
ntree = 230,        #<- Number of trees to grow. This should not be set to too small a number, to ensure that every input row gets classified at least a few times.
mtry = 6,            #<- Number of variables randomly sampled as candidates at each split. Default number for classification is sqrt(# of variables). Default number for regression is (# of variables / 3).
replace = TRUE,      #<- Should sampled data points be replaced.
#classwt = NULL,     #<- Priors of the classes. Use this if you want to specify what proportion of the data SHOULD be in each class. This is relevant if your sample data is not completely representative of the actual population
#strata = NULL,      #<- Not necessary for our purpose here.
sampsize = 300,      #<- Size of sample to draw each time.
nodesize = 5,        #<- Minimum numbers of data points in terminal nodes.
#maxnodes = NULL,    #<- Limits the number of maximum splits.
importance = TRUE,   #<- Should importance of predictors be assessed?
#localImp = FALSE,   #<- Should casewise importance measure be computed? (Setting this to TRUE will override importance.)
proximity = FALSE,    #<- Should a proximity measure between rows be calculated?
norm.votes = TRUE,   #<- If TRUE (default), the final result of votes are expressed as fractions. If FALSE, raw vote counts are returned (useful for combining results from different runs).
do.trace = TRUE,     #<- If set to TRUE, give a more verbose output as randomForest is run.
keep.forest = TRUE,  #<- If set to FALSE, the forest will not be retained in the output object. If xtest is given, defaults to FALSE.
keep.inbag = TRUE)   #<- Should an n by ntree matrix be returned that keeps track of which samples are in-bag in which trees?
credit_RF
imp_df = as.data.frame(importance(credit_RF, type = 2, scale = TRUE))
imp_df
View(imp_df)
imp_df
imp_df[0]
imp_df$1
imp_df["0"]
imp_df = as.data.frame(importance(credit_RF, type = 2, scale = TRUE))
colnames(imp_df) = c("var", "MeanDecreaseGini")
imp_df = as.data.frame(importance(credit_RF, type = 2, scale = TRUE))
colnames(imp_df) = c("var", "MeanDecreaseGini")
type(imp_df)
typeof(imp_df)
imp_df = as.data.frame(importance(credit_RF, type = 2, scale = TRUE))
imp_df = do.call(rbind.data.frame, imp_df)
colnames(imp_df) = c("var", "MeanDecreaseGini")
imp_df = as.data.frame(importance(credit_RF, type = 2, scale = TRUE))
imp_df = as.data.frame(importance(credit_RF, type = 2, scale = TRUE))
imp_df = do.call(rbind.data.frame, imp_df)
imp_df = as.data.frame(t(as.matrix(imp_df)))
colnames(imp_df) = c("var", "MeanDecreaseGini")
imp_df = as.data.frame(importance(credit_RF, type = 2, scale = TRUE))
imp_df = do.call(rbind.data.frame, imp_df)
imp_df = importance(credit_RF, type = 2, scale = TRUE)
imp_df = as.data.frame(importance(credit_RF, type = 2, scale = TRUE))
View(imp_df)
imp_df = as.data.frame(importance(credit_RF, type = 2, scale = TRUE))
varImpPlot(imp_df,type=2)
imp_df = as.data.frame(importance(credit_RF, type = 2, scale = TRUE))
(VI_F=importance(imp_df))
varImpPlot(imp_df,type=2)
imp_df = as.data.frame(importance(credit_RF, type = 2, scale = TRUE))
imp_df
imp_df = as.data.frame(importance(credit_RF, type = 2, scale = TRUE))
imp_df = as.data.frame(imp_df)
imp_list = as.data.frame(importance(credit_RF, type = 2, scale = TRUE))
imp_df = do.call(rbind.data.frame, imp_list)
colnames(imp_df) = names(imp_list)
imp_list = as.data.frame(importance(credit_RF, type = 2, scale = TRUE))
names(imp_list)
imp_list = as.data.frame(importance(credit_RF, type = 2, scale = TRUE))
imp_df = as.data.frame(importance(credit_RF, type = 2, scale = TRUE))
View(imp_list)
names(imp_list)
imp_df = do.call(rbind.data.frame, imp_list)
imp_df = as.data.frame(importance(credit_RF, type = 2, scale = TRUE))
names(imp_list)
imp_df = do.call(rbind.data.frame, imp_list)
imp_df = as.data.frame(importance(credit_RF, type = 2, scale = TRUE))
imp_df
imp_df = as.data.frame(importance(credit_RF, type = 2, scale = TRUE))
vars = c("CODE_GENDER_F"
"CODE_GENDER_M"
"FLAG_OWN_CAR_N"
"FLAG_OWN_CAR_Y"
"FLAG_OWN_REALTY_N"
"FLAG_OWN_REALTY_Y"
"CNT_CHILDREN"
"AMT_INCOME_TOTAL"
"NAME_INCOME_TYPE_Working"
"NAME_INCOME_TYPE_Pensioner"
"NAME_INCOME_TYPE_Student"
"NAME_EDUCATION_TYPE_Academic.degree"
"NAME_EDUCATION_TYPE_Higher.education"
"NAME_EDUCATION_TYPE_Secondary"
"NAME_FAMILY_STATUS_Married"
"NAME_FAMILY_STATUS_Single"
"NAME_HOUSING_TYPE_Apt"
"NAME_HOUSING_TYPE_With.parents"
"DAYS_BIRTH"
"DAYS_EMPLOYED"
"FLAG_MOBIL_1"
"FLAG_WORK_PHONE_0"
"FLAG_WORK_PHONE_1"
"FLAG_PHONE_0"
"FLAG_PHONE_1"
"FLAG_EMAIL_0"
"FLAG_EMAIL_1"
"OCCUPATION_TYPE_OFFICE"
"OCCUPATION_TYPE_LABOR"
"OCCUPATION_TYPE_TECH"
"OCCUPATION_TYPE_Unknown"
"CNT_FAM_MEMBERS"
"MONTHS_BALANCE")
imp_df = as.data.frame(importance(credit_RF, type = 2, scale = TRUE))
vars = c("CODE_GENDER_F",
"CODE_GENDER_M",
"FLAG_OWN_CAR_N",
"FLAG_OWN_CAR_Y",
"FLAG_OWN_REALTY_N",
"FLAG_OWN_REALTY_Y",
"CNT_CHILDREN",
"AMT_INCOME_TOTAL",
"NAME_INCOME_TYPE_Working",
"NAME_INCOME_TYPE_Pensioner",
"NAME_INCOME_TYPE_Student",
"NAME_EDUCATION_TYPE_Academic.degree",
"NAME_EDUCATION_TYPE_Higher.education",
"NAME_EDUCATION_TYPE_Secondary",
"NAME_FAMILY_STATUS_Married",
"NAME_FAMILY_STATUS_Single",
"NAME_HOUSING_TYPE_Apt",
"NAME_HOUSING_TYPE_With.parents",
"DAYS_BIRTH",
"DAYS_EMPLOYED",
"FLAG_MOBIL_1",
"FLAG_WORK_PHONE_0",
"FLAG_WORK_PHONE_1",
"FLAG_PHONE_0",
"FLAG_PHONE_1",
"FLAG_EMAIL_0",
"FLAG_EMAIL_1",
"OCCUPATION_TYPE_OFFICE",
"OCCUPATION_TYPE_LABOR",
"OCCUPATION_TYPE_TECH",
"OCCUPATION_TYPE_Unknown",
"CNT_FAM_MEMBERS",
"MONTHS_BALANCE")
imp_df = do.call(rbind.data.frame, imp_list)
colnames(imp_df) = vars
imp_df
imp_df["0"]
colnames(imp_df) = c("vars", "MeanGiniDecrease")
imp_df = as.data.frame(importance(credit_RF, type = 2, scale = TRUE))
vars = c("CODE_GENDER_F",
"CODE_GENDER_M",
"FLAG_OWN_CAR_N",
"FLAG_OWN_CAR_Y",
"FLAG_OWN_REALTY_N",
"FLAG_OWN_REALTY_Y",
"CNT_CHILDREN",
"AMT_INCOME_TOTAL",
"NAME_INCOME_TYPE_Working",
"NAME_INCOME_TYPE_Pensioner",
"NAME_INCOME_TYPE_Student",
"NAME_EDUCATION_TYPE_Academic.degree",
"NAME_EDUCATION_TYPE_Higher.education",
"NAME_EDUCATION_TYPE_Secondary",
"NAME_FAMILY_STATUS_Married",
"NAME_FAMILY_STATUS_Single",
"NAME_HOUSING_TYPE_Apt",
"NAME_HOUSING_TYPE_With.parents",
"DAYS_BIRTH",
"DAYS_EMPLOYED",
"FLAG_MOBIL_1",
"FLAG_WORK_PHONE_0",
"FLAG_WORK_PHONE_1",
"FLAG_PHONE_0",
"FLAG_PHONE_1",
"FLAG_EMAIL_0",
"FLAG_EMAIL_1",
"OCCUPATION_TYPE_OFFICE",
"OCCUPATION_TYPE_LABOR",
"OCCUPATION_TYPE_TECH",
"OCCUPATION_TYPE_Unknown",
"CNT_FAM_MEMBERS",
"MONTHS_BALANCE")
imp_df = do.call(rbind.data.frame, imp_list)
imp_df
imp_df = as.list(importance(credit_RF, type = 2, scale = TRUE))
imp_list = as.list(importance(credit_RF, type = 2, scale = TRUE))
vars = c("CODE_GENDER_F",
"CODE_GENDER_M",
"FLAG_OWN_CAR_N",
"FLAG_OWN_CAR_Y",
"FLAG_OWN_REALTY_N",
"FLAG_OWN_REALTY_Y",
"CNT_CHILDREN",
"AMT_INCOME_TOTAL",
"NAME_INCOME_TYPE_Working",
"NAME_INCOME_TYPE_Pensioner",
"NAME_INCOME_TYPE_Student",
"NAME_EDUCATION_TYPE_Academic.degree",
"NAME_EDUCATION_TYPE_Higher.education",
"NAME_EDUCATION_TYPE_Secondary",
"NAME_FAMILY_STATUS_Married",
"NAME_FAMILY_STATUS_Single",
"NAME_HOUSING_TYPE_Apt",
"NAME_HOUSING_TYPE_With.parents",
"DAYS_BIRTH",
"DAYS_EMPLOYED",
"FLAG_MOBIL_1",
"FLAG_WORK_PHONE_0",
"FLAG_WORK_PHONE_1",
"FLAG_PHONE_0",
"FLAG_PHONE_1",
"FLAG_EMAIL_0",
"FLAG_EMAIL_1",
"OCCUPATION_TYPE_OFFICE",
"OCCUPATION_TYPE_LABOR",
"OCCUPATION_TYPE_TECH",
"OCCUPATION_TYPE_Unknown",
"CNT_FAM_MEMBERS",
"MONTHS_BALANCE")
imp_df = data.frame(var=vars, MeanGiniDecrease=imp_list)
imp_df
View(imp_df)
imp_list = as.array(importance(credit_RF, type = 2, scale = TRUE))
vars = c("CODE_GENDER_F",
"CODE_GENDER_M",
"FLAG_OWN_CAR_N",
"FLAG_OWN_CAR_Y",
"FLAG_OWN_REALTY_N",
"FLAG_OWN_REALTY_Y",
"CNT_CHILDREN",
"AMT_INCOME_TOTAL",
"NAME_INCOME_TYPE_Working",
"NAME_INCOME_TYPE_Pensioner",
"NAME_INCOME_TYPE_Student",
"NAME_EDUCATION_TYPE_Academic.degree",
"NAME_EDUCATION_TYPE_Higher.education",
"NAME_EDUCATION_TYPE_Secondary",
"NAME_FAMILY_STATUS_Married",
"NAME_FAMILY_STATUS_Single",
"NAME_HOUSING_TYPE_Apt",
"NAME_HOUSING_TYPE_With.parents",
"DAYS_BIRTH",
"DAYS_EMPLOYED",
"FLAG_MOBIL_1",
"FLAG_WORK_PHONE_0",
"FLAG_WORK_PHONE_1",
"FLAG_PHONE_0",
"FLAG_PHONE_1",
"FLAG_EMAIL_0",
"FLAG_EMAIL_1",
"OCCUPATION_TYPE_OFFICE",
"OCCUPATION_TYPE_LABOR",
"OCCUPATION_TYPE_TECH",
"OCCUPATION_TYPE_Unknown",
"CNT_FAM_MEMBERS",
"MONTHS_BALANCE")
imp_df = data.frame(var=vars, MeanGiniDecrease=imp_list)
imp_df
View(imp_df)
colnames(imp_df) = vars
colnames(imp_df) = c("vars", "MeanGiniDecrease")
imp_list = as.array(importance(credit_RF, type = 2, scale = TRUE))
vars = c("CODE_GENDER_F",
"CODE_GENDER_M",
"FLAG_OWN_CAR_N",
"FLAG_OWN_CAR_Y",
"FLAG_OWN_REALTY_N",
"FLAG_OWN_REALTY_Y",
"CNT_CHILDREN",
"AMT_INCOME_TOTAL",
"NAME_INCOME_TYPE_Working",
"NAME_INCOME_TYPE_Pensioner",
"NAME_INCOME_TYPE_Student",
"NAME_EDUCATION_TYPE_Academic.degree",
"NAME_EDUCATION_TYPE_Higher.education",
"NAME_EDUCATION_TYPE_Secondary",
"NAME_FAMILY_STATUS_Married",
"NAME_FAMILY_STATUS_Single",
"NAME_HOUSING_TYPE_Apt",
"NAME_HOUSING_TYPE_With.parents",
"DAYS_BIRTH",
"DAYS_EMPLOYED",
"FLAG_MOBIL_1",
"FLAG_WORK_PHONE_0",
"FLAG_WORK_PHONE_1",
"FLAG_PHONE_0",
"FLAG_PHONE_1",
"FLAG_EMAIL_0",
"FLAG_EMAIL_1",
"OCCUPATION_TYPE_OFFICE",
"OCCUPATION_TYPE_LABOR",
"OCCUPATION_TYPE_TECH",
"OCCUPATION_TYPE_Unknown",
"CNT_FAM_MEMBERS",
"MONTHS_BALANCE")
imp_df = data.frame(var=vars, MeanGiniDecrease=imp_list)
imp_df
colnames(imp_df) = vars
colnames(imp_df) = c("vars", "MeanGiniDecrease")
p<-ggplot(data=imp_df, aes(x=MeanDecreaseGini, y=vars)) +
geom_bar(stat="identity")+
geom_text(aes(label=Freq), vjust=-0.3, size=3.5)+
theme_minimal()
p
imp_list = as.array(importance(credit_RF, type = 2, scale = TRUE))
vars = c("CODE_GENDER_F",
"CODE_GENDER_M",
"FLAG_OWN_CAR_N",
"FLAG_OWN_CAR_Y",
"FLAG_OWN_REALTY_N",
"FLAG_OWN_REALTY_Y",
"CNT_CHILDREN",
"AMT_INCOME_TOTAL",
"NAME_INCOME_TYPE_Working",
"NAME_INCOME_TYPE_Pensioner",
"NAME_INCOME_TYPE_Student",
"NAME_EDUCATION_TYPE_Academic.degree",
"NAME_EDUCATION_TYPE_Higher.education",
"NAME_EDUCATION_TYPE_Secondary",
"NAME_FAMILY_STATUS_Married",
"NAME_FAMILY_STATUS_Single",
"NAME_HOUSING_TYPE_Apt",
"NAME_HOUSING_TYPE_With.parents",
"DAYS_BIRTH",
"DAYS_EMPLOYED",
"FLAG_MOBIL_1",
"FLAG_WORK_PHONE_0",
"FLAG_WORK_PHONE_1",
"FLAG_PHONE_0",
"FLAG_PHONE_1",
"FLAG_EMAIL_0",
"FLAG_EMAIL_1",
"OCCUPATION_TYPE_OFFICE",
"OCCUPATION_TYPE_LABOR",
"OCCUPATION_TYPE_TECH",
"OCCUPATION_TYPE_Unknown",
"CNT_FAM_MEMBERS",
"MONTHS_BALANCE")
imp_df = data.frame(var=vars, MeanGiniDecrease=imp_list)
imp_df
p<-ggplot(data=imp_df, aes(x=MeanDecreaseGini, y=vars)) +
geom_bar(stat="identity")+
geom_text(aes(label=Freq), vjust=-0.3, size=3.5)+
theme_minimal()
p
p<-ggplot(data=imp_df, aes(x=MeanDecreaseGini, y=vars)) +
geom_bar(stat="identity")+
geom_text(aes(label=vars), vjust=-0.3, size=3.5)+
theme_minimal()
p
p<-ggplot(data=imp_df, aes(x=MeanDecreaseGini, y=vars)) +
geom_bar(stat="identity")
theme_minimal()
p<-ggplot(data=imp_df, aes(x=MeanDecreaseGini, y=vars)) +
geom_bar(stat="identity")+
theme_minimal()
p
## Model Validation Test
```{r eval=FALSE}
tune_test <- function(model){
credit_predict_tune = predict(model, tune, type="response", predict.all=FALSE, proximity = FALSE)
(credit_eval <- confusionMatrix(as.factor(credit_predict_tune),
as.factor(tune$STATUS),
dnn=c("Prediction", "Actual"),
mode = "sens_spec"))
}
tune_test(credit_RF)
credit_RF_more_tuning = randomForest(STATUS ~ .,          #<- Formula: response variable ~ predictors.
#   The period means 'use all other variables in the data'.
train,     #<- A data frame with the variables to be used.
#y = NULL,           #<- A response vector. This is unnecessary because we're specifying a response formula.
#subset = NULL,      #<- This is unnecessary because we're using all the rows in the training data set.
#xtest = NULL,       #<- This is already defined in the formula by the ".".
#ytest = NULL,       #<- This is already defined in the formula by "PREGNANT".
ntree = 230,        #<- Number of trees to grow. This should not be set to too small a number, to ensure that every input row gets classified at least a few times.
mtry = 12,            #<- Number of variables randomly sampled as candidates at each split. Default number for classification is sqrt(# of variables). Default number for regression is (# of variables / 3).
replace = TRUE,      #<- Should sampled data points be replaced.
#classwt = NULL,     #<- Priors of the classes. Use this if you want to specify what proportion of the data SHOULD be in each class. This is relevant if your sample data is not completely representative of the actual population
#strata = NULL,      #<- Not necessary for our purpose here.
sampsize = 500,      #<- Size of sample to draw each time.
nodesize = 5,        #<- Minimum numbers of data points in terminal nodes.
#maxnodes = NULL,    #<- Limits the number of maximum splits.
importance = TRUE,   #<- Should importance of predictors be assessed?
#localImp = FALSE,   #<- Should casewise importance measure be computed? (Setting this to TRUE will override importance.)
proximity = FALSE,    #<- Should a proximity measure between rows be calculated?
norm.votes = TRUE,   #<- If TRUE (default), the final result of votes are expressed as fractions. If FALSE, raw vote counts are returned (useful for combining results from different runs).
do.trace = TRUE,     #<- If set to TRUE, give a more verbose output as randomForest is run.
keep.forest = TRUE,  #<- If set to FALSE, the forest will not be retained in the output object. If xtest is given, defaults to FALSE.
keep.inbag = TRUE)   #<- Should an n by ntree matrix be returned that keeps track of which samples are in-bag in which trees?
credit_RF_more_tuning
imp_list = as.array(importance(credit_RF, type = 2, scale = TRUE))
vars = c("CODE_GENDER_F",
"CODE_GENDER_M",
"FLAG_OWN_CAR_N",
"FLAG_OWN_CAR_Y",
"FLAG_OWN_REALTY_N",
"FLAG_OWN_REALTY_Y",
"CNT_CHILDREN",
"AMT_INCOME_TOTAL",
"NAME_INCOME_TYPE_Working",
"NAME_INCOME_TYPE_Pensioner",
"NAME_INCOME_TYPE_Student",
"NAME_EDUCATION_TYPE_Academic.degree",
"NAME_EDUCATION_TYPE_Higher.education",
"NAME_EDUCATION_TYPE_Secondary",
"NAME_FAMILY_STATUS_Married",
"NAME_FAMILY_STATUS_Single",
"NAME_HOUSING_TYPE_Apt",
"NAME_HOUSING_TYPE_With.parents",
"DAYS_BIRTH",
"DAYS_EMPLOYED",
"FLAG_MOBIL_1",
"FLAG_WORK_PHONE_0",
"FLAG_WORK_PHONE_1",
"FLAG_PHONE_0",
"FLAG_PHONE_1",
"FLAG_EMAIL_0",
"FLAG_EMAIL_1",
"OCCUPATION_TYPE_OFFICE",
"OCCUPATION_TYPE_LABOR",
"OCCUPATION_TYPE_TECH",
"OCCUPATION_TYPE_Unknown",
"CNT_FAM_MEMBERS",
"MONTHS_BALANCE")
```{r results='hide'}
imp_df = data.frame(var=vars, MeanGiniDecrease=imp_list)
imp_df
colnames(imp_df) = vars
View(imp_df)
imp_list = as.array(importance(credit_RF, type = 2, scale = TRUE))
vars = c("CODE_GENDER_F",
"CODE_GENDER_M",
"FLAG_OWN_CAR_N",
"FLAG_OWN_CAR_Y",
"FLAG_OWN_REALTY_N",
"FLAG_OWN_REALTY_Y",
"CNT_CHILDREN",
"AMT_INCOME_TOTAL",
"NAME_INCOME_TYPE_Working",
"NAME_INCOME_TYPE_Pensioner",
"NAME_INCOME_TYPE_Student",
"NAME_EDUCATION_TYPE_Academic.degree",
"NAME_EDUCATION_TYPE_Higher.education",
"NAME_EDUCATION_TYPE_Secondary",
"NAME_FAMILY_STATUS_Married",
"NAME_FAMILY_STATUS_Single",
"NAME_HOUSING_TYPE_Apt",
"NAME_HOUSING_TYPE_With.parents",
"DAYS_BIRTH",
"DAYS_EMPLOYED",
"FLAG_MOBIL_1",
"FLAG_WORK_PHONE_0",
"FLAG_WORK_PHONE_1",
"FLAG_PHONE_0",
"FLAG_PHONE_1",
"FLAG_EMAIL_0",
"FLAG_EMAIL_1",
"OCCUPATION_TYPE_OFFICE",
"OCCUPATION_TYPE_LABOR",
"OCCUPATION_TYPE_TECH",
"OCCUPATION_TYPE_Unknown",
"CNT_FAM_MEMBERS",
"MONTHS_BALANCE")
imp_df = data.frame(var=vars, MeanGiniDecrease=imp_list)
View(imp_df)
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
#url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data"
data <- read_csv("application_record.csv")
data2 <- read_csv("credit_record.csv")
credit <-merge(data,data2)
status <- as.factor(credit$STATUS)
table(status)
counts = as.data.frame(table(status))
p<-ggplot(data=counts, aes(x=status, y=Freq)) +
geom_bar(stat="identity")+
geom_text(aes(label=Freq), vjust=-0.3, size=3.5)+
theme_minimal()
p
